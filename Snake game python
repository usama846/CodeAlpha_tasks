import turtle
import random

Height = 500
Width = 500
Delay = 100 #MilliSeconds
Food_size = 30

offsets = {
    "up": (0,20),
    "down": (0,-20),
    "left": (-20,0),
    "right": (20,0)
}

high_score = 0

try:
    with open("high_score.txt", "r") as file:
        high_score = int(file.read())
except FileNotFoundError:
    pass

def update_high_score():
    global high_score
    if score > high_score:
        high_score = score
        with open("high_score.txt","w") as file:
            file.write(str(high_score))

def go_up():
    global snake_direction
    if snake_direction != "down":
        snake_direction = "up"
        
def go_right():
    global snake_direction
    if snake_direction != "left":
        snake_direction = "right"

def go_down():
    global snake_direction
    if snake_direction != "up":
        snake_direction = "down"
        
        
def go_left():
    global snake_direction
    if snake_direction != "right":
        snake_direction = "left"
        


def move_snake():
   s1.clearstamps()
   
   new_head = snake[-1].copy()
   new_head[0] += offsets[snake_direction][0]
   new_head[1] += offsets[snake_direction][1]
   
   #check collison
   if new_head in snake or new_head[0] < - Width / 2 or new_head[0] > Width / 2 or new_head[1] < -Height /2 or new_head[1] > Height/2:
       reset()
       
   else:
       #Add new head to snake
       snake.append(new_head)
       
       #check food collison 
       if not food_collison():
           snake.pop(0)    #keep the snake length same untill fedup
   
       for segment in snake:
         s1.goto(segment[0],segment[1])
         s1.stamp()
         
       screen.title(f"Snake Game, Score: {score},High Score: {high_score}") 
       screen.update()
   
       turtle.ontimer(move_snake,Delay) 
       
def food_collison():
    global food_pos,score
    if get_distance(snake[-1], food_pos) < 20:
        score += 1
        update_high_score()
        food_pos = get_random_food_pos()
        food.goto(food_pos)
        return True
    return False   
       
def get_random_food_pos():
    x = random.randint(int(-Width /2 + Food_size), int(Width /2 - Food_size))  
    y = random.randint(int(-Height /2 + Food_size), int(Height /2 - Food_size))
    return (x, y)
    
def get_distance(pos1,pos2):
    x1,y1 = pos1
    x2,y2 = pos2
    distance = ((y2 - y1) **2 + (x2 - x1) **2) **0.5
    return distance

def reset():
    global score,snake,snake_direction,food_pos
   
    score = 0
    snake = [[0, 0], [20, 0], [40, 0], [60, 0]]
    snake_direction = "up"
    food_pos = get_random_food_pos()
    food.goto(food_pos)
    move_snake()
    
    

screen = turtle.Screen()
screen.setup(Width,Height)
screen.title("Snake")
screen.bgcolor("yellow")
screen.tracer(0)

screen.listen()
screen.onkey(go_up, "Up")
screen.onkey(go_right, "Right")
screen.onkey(go_down, "Down")
screen.onkey(go_left, "Left")

s1 = turtle.Turtle()
s1.shape("circle")
s1.color("green")
s1.penup()


food = turtle.Turtle()
food.shape("circle")
food.color("red")
food.shapesize(Food_size / 20)
food.penup()


reset()

turtle.done()
